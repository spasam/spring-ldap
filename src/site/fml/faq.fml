<?xml version="1.0" encoding="UTF-8"?>
<faqs title="Frequently Asked Questions" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation="http://maven.apache.org/maven-1.x/plugins/faq/faq.xsd">
    <part id="operational">
        <title>Operational Attributes</title>
        <faq id="remove-oper-attr">
            <question>How do I remove an operational attribute using <tt>context.removeAttributeValue()</tt>?</question>
            <answer>
                <p>
                    The DirContextAdapter will only read the visible attributes per default. This is because the
                    operational attributes will only be returned by the server if explicitly asked for, and there
                    is no way for Spring LDAP to know what attributes to ask for. This means that the DirContextAdapter
                    will not be populated with the operational attributes, and hence the <tt>removeAttributeValue</tt>
                    will not have any effect (since from the DirContextAdapter's point of view, it wasn't there in the
                    first place).
                </p>
                <p>
                    There are basically two ways to do this:
                </p>
                <ol>
                    <li>Use a search or lookup method that takes the attribute names as argument, like
                    <tt>LdapTemplate#lookup(Name, String[], ContextMapper)</tt>. Use a ContextMapper
                    implementation that just returns the supplied DirContextAdapter in <tt>mapFromContext()</tt>.
                    </li>
                    <li>Use <tt>LdapTemplate#modifyAttributes(Name, ModificationItem[])</tt> directly, manually
                    building the ModificationItem array.
                    </li>
                </ol>
            </answer>
        </faq>
    </part>
<!--
    <part id="general">
        <title>General</title>
        <faq id="requirements">
            <question>Do I need any other SOAP framework to run Spring Web Services?</question>
            <answer>
                You don't need any other SOAP framework to use Spring Web services, though it can use some of the
                features of Axis 1 and 2.
            </answer>
        </faq>
        <faq id="namespace_err">
            <question>I get <tt>NAMESPACE_ERR</tt> exceptions when using Spring-WS. What can I do about it?</question>
            <answer>
                <p>
                    If you get the following Exception:
                </p>
                <pre>
NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
                </pre>
                <p>
                    Most often, this exception is related to an older version of Xalan being used. Make sure to upgrade
                    to 2.7.0.
                </p>
            </answer>
        </faq>

    </part>
    <part id="java">
        <title>Java</title>
        <faq id="java-1.4">
            <question>Does Spring-WS work under Java 1.4?</question>
            <answer>
                <p>
                    Spring Web Services works under Java 1.4, but it requires some effort to make it work. Java 1.4 is
                    bundled with the older XML parser Crimson, which does not handle namespaces correctly. Additionally,
                    it is bundled with an older version of Xalan, which also has problems.
                    Unfortunately, placing newer versions of these on the class path does not override them.
                    See <a href="http://xml.apache.org/xalan-j/faq.html#faq-N100D6">this FAQ</a> entry on the Xalan
                    site, and also <a href="http://xerces.apache.org/xerces2-j/faq-general.html#faq-4">this entry</a>
                    on the Xerces site.
                </p>
                <p>
                    The only solution that works is to add newer versions of Xerces and Xalan in the lib/endorsed
                    directory of your JDK, as explained in those FAQs (i.e.<tt>$JAVA_HOME/lib/endorsed</tt>).
                    The following libraries are known to work with Java 1.4.2:
                </p>
                <table class="bodyTable">
                    <tbody>
                        <tr><th>Library</th><th>Version</th></tr>
                        <tr><td><a href="http://xerces.apache.org/xerces2-j/">Xerces</a></td><td>2.8.1</td></tr>
                        <tr><td><a href="http://xml.apache.org/xalan-j/">Xalan</a></td><td>2.7.0</td></tr>
                        <tr><td><a href="http://xerces.apache.org/xerces2-j/">XML-APIs</a></td><td>1.3.04</td></tr>
                        <tr><td><a href="http://java.sun.com/webservices/downloads/1.3/index.html">SAAJ</a></td><td>1.2</td></tr>
                    </tbody>
                </table>
                <p>
                    If you want to use WS-Security, note that the <code>XwsSecurityInterceptor</code> requires Java 5,
                    because an underlying library (XWSS) requires it. Instead, you can use the
                    <code>Wss4jSecurityInterceptor</code>.
                </p>
            </answer>
        </faq>
        <faq id="java-1.6">
            <question>Does Spring-WS work under Java 1.6?</question>
            <answer>
                <p>
                    Java 1.6 ships with SAAJ 1.3, JAXB 2.0, and JAXP 1.4 (a custom version of Xerces and Xalan).
                    Overriding these libraries by putting different version on the classpath will result in various
                    classloading issues, or exceptions in <tt>org.apache.xml.serializer.ToXMLSAXHandler</tt>.
                    The only option for using more recent versions is to put the newer version in the
                    <code>endorsed</code> directory (see above).
                </p>
            </answer>
        </faq>
    </part>
-->
</faqs>
